// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  ROXACOMP
// DateTime: 6/1/2017 7:39:38 AM
// UserName: Edward
// Input file <TCCL.grammar.y - 6/1/2017 7:39:37 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ASTBuilder
{
internal enum Token {error=2,EOF=3,STATIC=4,STRUCT=5,QUESTION=6,
    RSLASH=7,MINUSOP=8,NULL=9,INT=10,OP_EQ=11,OP_LT=12,
    COLON=13,OP_LOR=14,ELSE=15,PERCENT=16,THIS=17,CLASS=18,
    PIPE=19,PUBLIC=20,PERIOD=21,HAT=22,COMMA=23,VOID=24,
    TILDE=25,LPAREN=26,RPAREN=27,OP_GE=28,SEMICOLON=29,IF=30,
    NEW=31,WHILE=32,PRIVATE=33,BANG=34,OP_LE=35,AND=36,
    LBRACE=37,RBRACE=38,LBRACKET=39,RBRACKET=40,BOOLEAN=41,INSTANCEOF=42,
    ASTERISK=43,EQUALS=44,PLUSOP=45,RETURN=46,OP_GT=47,OP_NE=48,
    OP_LAND=49,INT_NUMBER=50,IDENTIFIER=51,LITERAL=52,SUPER=53,UNARY=54};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<AbstractNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public AbstractNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AbstractNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class TCCLParser: ShiftReduceParser<AbstractNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[114];
  private static State[] states = new State[182];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ClassDeclaration", "MethodDeclarations", 
      "Modifiers", "Identifier", "ClassBody", "MethodDeclaration", "FieldDeclarations", 
      "FieldDeclaration", "FieldVariableDeclaration", "ConstructorDeclaration", 
      "StaticInitializer", "StructDeclaration", "TypeSpecifier", "FieldVariableDeclarators", 
      "TypeName", "ArraySpecifier", "PrimitiveType", "QualifiedName", "FieldVariableDeclaratorName", 
      "MethodDeclarator", "MethodBody", "MethodDeclaratorName", "ParameterList", 
      "Parameter", "DeclaratorName", "LocalVariableDeclaratorName", "Block", 
      "LocalVariableDeclarationsAndStatements", "LocalVariableDeclarationOrStatement", 
      "LocalVariableDeclarationStatement", "Statement", "LocalVariableDeclarators", 
      "EmptyStatement", "ExpressionStatement", "SelectionStatement", "IterationStatement", 
      "ReturnStatement", "Expression", "ArgumentList", "ArithmeticUnaryOperator", 
      "PrimaryExpression", "NotJustName", "SpecialName", "ComplexPrimary", "ComplexPrimaryNoParenthesis", 
      "Number", "FieldAccess", "MethodCall", "MethodReference", };

  static TCCLParser() {
    states[0] = new State(new int[]{20,120,33,121,4,122},new int[]{-1,1,-3,3,-5,4,-4,178,-8,181});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{18,5,20,117,33,118,4,119,41,40,10,41,24,42,51,20},new int[]{-15,176,-17,36,-19,39,-20,162,-6,81,-18,111});
    states[5] = new State(new int[]{51,20},new int[]{-6,6});
    states[6] = new State(new int[]{37,8},new int[]{-7,7});
    states[7] = new State(-4);
    states[8] = new State(new int[]{38,174,20,120,33,121,4,168},new int[]{-9,9,-10,175,-11,12,-5,14,-8,170,-12,171,-13,172,-14,173});
    states[9] = new State(new int[]{38,10,20,120,33,121,4,168},new int[]{-10,11,-11,12,-5,14,-8,170,-12,171,-13,172,-14,173});
    states[10] = new State(-13);
    states[11] = new State(-16);
    states[12] = new State(new int[]{29,13});
    states[13] = new State(-17);
    states[14] = new State(new int[]{20,117,33,118,4,119,5,114,41,40,10,41,24,42,51,20},new int[]{-15,15,-22,165,-17,36,-19,39,-20,162,-6,167,-18,111,-24,153});
    states[15] = new State(new int[]{51,20},new int[]{-16,16,-22,21,-21,151,-6,152,-24,153});
    states[16] = new State(new int[]{23,17,29,-23});
    states[17] = new State(new int[]{51,20},new int[]{-21,18,-6,19});
    states[18] = new State(-33);
    states[19] = new State(-44);
    states[20] = new State(-112);
    states[21] = new State(new int[]{37,24},new int[]{-23,22,-29,23});
    states[22] = new State(-34);
    states[23] = new State(-46);
    states[24] = new State(new int[]{38,149,41,40,10,41,24,42,51,20,20,120,33,121,4,122,29,125,45,84,8,85,17,91,9,92,26,94,52,98,50,100,30,130,32,138,46,144,37,24},new int[]{-30,25,-31,150,-32,28,-15,29,-17,36,-19,39,-20,43,-6,81,-18,111,-14,112,-5,113,-33,123,-35,124,-36,126,-40,128,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103,-37,129,-38,137,-39,143,-29,148});
    states[25] = new State(new int[]{38,26,41,40,10,41,24,42,51,20,20,120,33,121,4,122,29,125,45,84,8,85,17,91,9,92,26,94,52,98,50,100,30,130,32,138,46,144,37,24},new int[]{-31,27,-32,28,-15,29,-17,36,-19,39,-20,43,-6,81,-18,111,-14,112,-5,113,-33,123,-35,124,-36,126,-40,128,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103,-37,129,-38,137,-39,143,-29,148});
    states[26] = new State(-49);
    states[27] = new State(-52);
    states[28] = new State(-53);
    states[29] = new State(new int[]{51,20},new int[]{-34,30,-28,35,-6,34});
    states[30] = new State(new int[]{29,31,23,32});
    states[31] = new State(-55);
    states[32] = new State(new int[]{51,20},new int[]{-28,33,-6,34});
    states[33] = new State(-58);
    states[34] = new State(-45);
    states[35] = new State(-57);
    states[36] = new State(new int[]{39,37,51,-24});
    states[37] = new State(new int[]{40,38});
    states[38] = new State(-28);
    states[39] = new State(-26);
    states[40] = new State(-29);
    states[41] = new State(-30);
    states[42] = new State(-31);
    states[43] = new State(new int[]{21,44,44,46,39,-27,51,-27,14,-94,49,-94,19,-94,22,-94,36,-94,11,-94,48,-94,47,-94,12,-94,35,-94,28,-94,45,-94,8,-94,43,-94,7,-94,16,-94,29,-94,26,-108});
    states[44] = new State(new int[]{51,20},new int[]{-6,45});
    states[45] = new State(-41);
    states[46] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,47,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[47] = new State(new int[]{14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-73,27,-73,23,-73});
    states[48] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,49,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[49] = new State(new int[]{14,-74,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-74,27,-74,23,-74});
    states[50] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,51,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[51] = new State(new int[]{14,-75,49,-75,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-75,27,-75,23,-75});
    states[52] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,53,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[53] = new State(new int[]{14,-76,49,-76,19,-76,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-76,27,-76,23,-76});
    states[54] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,55,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[55] = new State(new int[]{14,-77,49,-77,19,-77,22,-77,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-77,27,-77,23,-77});
    states[56] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,57,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[57] = new State(new int[]{14,-78,49,-78,19,-78,22,-78,36,-78,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-78,27,-78,23,-78});
    states[58] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,59,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[59] = new State(new int[]{14,-79,49,-79,19,-79,22,-79,36,-79,11,-79,48,-79,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-79,27,-79,23,-79});
    states[60] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,61,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[61] = new State(new int[]{14,-80,49,-80,19,-80,22,-80,36,-80,11,-80,48,-80,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-80,27,-80,23,-80});
    states[62] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,63,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[63] = new State(new int[]{14,-81,49,-81,19,-81,22,-81,36,-81,11,-81,48,-81,47,-81,12,-81,35,-81,28,-81,45,70,8,72,43,74,7,76,16,78,29,-81,27,-81,23,-81});
    states[64] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,65,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[65] = new State(new int[]{14,-82,49,-82,19,-82,22,-82,36,-82,11,-82,48,-82,47,-82,12,-82,35,-82,28,-82,45,70,8,72,43,74,7,76,16,78,29,-82,27,-82,23,-82});
    states[66] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,67,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[67] = new State(new int[]{14,-83,49,-83,19,-83,22,-83,36,-83,11,-83,48,-83,47,-83,12,-83,35,-83,28,-83,45,70,8,72,43,74,7,76,16,78,29,-83,27,-83,23,-83});
    states[68] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,69,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[69] = new State(new int[]{14,-84,49,-84,19,-84,22,-84,36,-84,11,-84,48,-84,47,-84,12,-84,35,-84,28,-84,45,70,8,72,43,74,7,76,16,78,29,-84,27,-84,23,-84});
    states[70] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,71,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[71] = new State(new int[]{14,-85,49,-85,19,-85,22,-85,36,-85,11,-85,48,-85,47,-85,12,-85,35,-85,28,-85,45,-85,8,-85,43,74,7,76,16,78,29,-85,27,-85,23,-85});
    states[72] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,73,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[73] = new State(new int[]{14,-86,49,-86,19,-86,22,-86,36,-86,11,-86,48,-86,47,-86,12,-86,35,-86,28,-86,45,-86,8,-86,43,74,7,76,16,78,29,-86,27,-86,23,-86});
    states[74] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,75,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[75] = new State(-87);
    states[76] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,77,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[77] = new State(-88);
    states[78] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,79,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[79] = new State(-89);
    states[80] = new State(new int[]{44,46,21,44,14,-94,49,-94,19,-94,22,-94,36,-94,11,-94,48,-94,47,-94,12,-94,35,-94,28,-94,45,-94,8,-94,43,-94,7,-94,16,-94,29,-94,27,-94,23,-94,26,-108});
    states[81] = new State(-40);
    states[82] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,83,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[83] = new State(-90);
    states[84] = new State(-92);
    states[85] = new State(-93);
    states[86] = new State(-91);
    states[87] = new State(new int[]{21,88,14,-95,49,-95,19,-95,22,-95,36,-95,11,-95,48,-95,47,-95,12,-95,35,-95,28,-95,45,-95,8,-95,43,-95,7,-95,16,-95,29,-95,27,-95,23,-95});
    states[88] = new State(new int[]{51,20},new int[]{-6,89});
    states[89] = new State(-104);
    states[90] = new State(new int[]{21,-96,14,-96,49,-96,19,-96,22,-96,36,-96,11,-96,48,-96,47,-96,12,-96,35,-96,28,-96,45,-96,8,-96,43,-96,7,-96,16,-96,29,-96,27,-96,23,-96,26,-109});
    states[91] = new State(-110);
    states[92] = new State(-111);
    states[93] = new State(-97);
    states[94] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,95,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[95] = new State(new int[]{27,96,14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78});
    states[96] = new State(-98);
    states[97] = new State(new int[]{21,-99,14,-99,49,-99,19,-99,22,-99,36,-99,11,-99,48,-99,47,-99,12,-99,35,-99,28,-99,45,-99,8,-99,43,-99,7,-99,16,-99,29,-99,27,-99,23,-99,26,-107});
    states[98] = new State(-100);
    states[99] = new State(-101);
    states[100] = new State(-113);
    states[101] = new State(-102);
    states[102] = new State(-103);
    states[103] = new State(new int[]{26,104});
    states[104] = new State(new int[]{27,109,51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-41,105,-40,110,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[105] = new State(new int[]{27,106,23,107});
    states[106] = new State(-105);
    states[107] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,108,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[108] = new State(new int[]{14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,27,-72,23,-72});
    states[109] = new State(-106);
    states[110] = new State(new int[]{14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,27,-71,23,-71});
    states[111] = new State(-25);
    states[112] = new State(-56);
    states[113] = new State(new int[]{5,114,20,117,33,118,4,119});
    states[114] = new State(new int[]{51,20},new int[]{-6,115});
    states[115] = new State(new int[]{37,8},new int[]{-7,116});
    states[116] = new State(-22);
    states[117] = new State(-10);
    states[118] = new State(-11);
    states[119] = new State(-12);
    states[120] = new State(-7);
    states[121] = new State(-8);
    states[122] = new State(-9);
    states[123] = new State(-54);
    states[124] = new State(-59);
    states[125] = new State(-65);
    states[126] = new State(new int[]{29,127});
    states[127] = new State(-60);
    states[128] = new State(new int[]{14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78,29,-66});
    states[129] = new State(-61);
    states[130] = new State(new int[]{26,131});
    states[131] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,132,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[132] = new State(new int[]{27,133,14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78});
    states[133] = new State(new int[]{29,125,51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100,30,130,32,138,46,144,37,24},new int[]{-33,134,-35,124,-36,126,-40,128,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103,-37,129,-38,137,-39,143,-29,148});
    states[134] = new State(new int[]{15,135});
    states[135] = new State(new int[]{29,125,51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100,30,130,32,138,46,144,37,24},new int[]{-33,136,-35,124,-36,126,-40,128,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103,-37,129,-38,137,-39,143,-29,148});
    states[136] = new State(-67);
    states[137] = new State(-62);
    states[138] = new State(new int[]{26,139});
    states[139] = new State(new int[]{51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,140,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[140] = new State(new int[]{27,141,14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78});
    states[141] = new State(new int[]{29,125,51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100,30,130,32,138,46,144,37,24},new int[]{-33,142,-35,124,-36,126,-40,128,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103,-37,129,-38,137,-39,143,-29,148});
    states[142] = new State(-68);
    states[143] = new State(-63);
    states[144] = new State(new int[]{29,147,51,20,45,84,8,85,17,91,9,92,26,94,52,98,50,100},new int[]{-40,145,-20,80,-6,81,-42,82,-43,86,-44,87,-45,90,-46,93,-47,97,-48,99,-49,101,-50,102,-51,103});
    states[145] = new State(new int[]{29,146,14,48,49,50,19,52,22,54,36,56,11,58,48,60,47,62,12,64,35,66,28,68,45,70,8,72,43,74,7,76,16,78});
    states[146] = new State(-69);
    states[147] = new State(-70);
    states[148] = new State(-64);
    states[149] = new State(-50);
    states[150] = new State(-51);
    states[151] = new State(-32);
    states[152] = new State(new int[]{23,-44,29,-44,26,-43});
    states[153] = new State(new int[]{26,154});
    states[154] = new State(new int[]{27,163,41,40,10,41,24,42,51,20},new int[]{-25,155,-26,164,-15,159,-17,36,-19,39,-20,162,-6,81,-18,111});
    states[155] = new State(new int[]{27,156,23,157});
    states[156] = new State(-35);
    states[157] = new State(new int[]{41,40,10,41,24,42,51,20},new int[]{-26,158,-15,159,-17,36,-19,39,-20,162,-6,81,-18,111});
    states[158] = new State(-38);
    states[159] = new State(new int[]{51,20},new int[]{-27,160,-6,161});
    states[160] = new State(-39);
    states[161] = new State(-42);
    states[162] = new State(new int[]{21,44,39,-27,51,-27});
    states[163] = new State(-36);
    states[164] = new State(-37);
    states[165] = new State(new int[]{37,24},new int[]{-29,166});
    states[166] = new State(-47);
    states[167] = new State(new int[]{21,-40,39,-40,51,-40,26,-43});
    states[168] = new State(new int[]{37,24,20,-9,33,-9,4,-9,5,-9,41,-9,10,-9,24,-9,51,-9},new int[]{-29,169});
    states[169] = new State(-48);
    states[170] = new State(-18);
    states[171] = new State(-19);
    states[172] = new State(-20);
    states[173] = new State(-21);
    states[174] = new State(-14);
    states[175] = new State(-15);
    states[176] = new State(new int[]{51,20},new int[]{-22,21,-24,153,-6,177});
    states[177] = new State(-43);
    states[178] = new State(new int[]{20,120,33,121,4,122,3,-3},new int[]{-8,179,-5,180});
    states[179] = new State(-6);
    states[180] = new State(new int[]{20,117,33,118,4,119,41,40,10,41,24,42,51,20},new int[]{-15,176,-17,36,-19,39,-20,162,-6,81,-18,111});
    states[181] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-5,18,-6,-7});
    rules[5] = new Rule(-4, new int[]{-8});
    rules[6] = new Rule(-4, new int[]{-4,-8});
    rules[7] = new Rule(-5, new int[]{20});
    rules[8] = new Rule(-5, new int[]{33});
    rules[9] = new Rule(-5, new int[]{4});
    rules[10] = new Rule(-5, new int[]{-5,20});
    rules[11] = new Rule(-5, new int[]{-5,33});
    rules[12] = new Rule(-5, new int[]{-5,4});
    rules[13] = new Rule(-7, new int[]{37,-9,38});
    rules[14] = new Rule(-7, new int[]{37,38});
    rules[15] = new Rule(-9, new int[]{-10});
    rules[16] = new Rule(-9, new int[]{-9,-10});
    rules[17] = new Rule(-10, new int[]{-11,29});
    rules[18] = new Rule(-10, new int[]{-8});
    rules[19] = new Rule(-10, new int[]{-12});
    rules[20] = new Rule(-10, new int[]{-13});
    rules[21] = new Rule(-10, new int[]{-14});
    rules[22] = new Rule(-14, new int[]{-5,5,-6,-7});
    rules[23] = new Rule(-11, new int[]{-5,-15,-16});
    rules[24] = new Rule(-15, new int[]{-17});
    rules[25] = new Rule(-15, new int[]{-18});
    rules[26] = new Rule(-17, new int[]{-19});
    rules[27] = new Rule(-17, new int[]{-20});
    rules[28] = new Rule(-18, new int[]{-17,39,40});
    rules[29] = new Rule(-19, new int[]{41});
    rules[30] = new Rule(-19, new int[]{10});
    rules[31] = new Rule(-19, new int[]{24});
    rules[32] = new Rule(-16, new int[]{-21});
    rules[33] = new Rule(-16, new int[]{-16,23,-21});
    rules[34] = new Rule(-8, new int[]{-5,-15,-22,-23});
    rules[35] = new Rule(-22, new int[]{-24,26,-25,27});
    rules[36] = new Rule(-22, new int[]{-24,26,27});
    rules[37] = new Rule(-25, new int[]{-26});
    rules[38] = new Rule(-25, new int[]{-25,23,-26});
    rules[39] = new Rule(-26, new int[]{-15,-27});
    rules[40] = new Rule(-20, new int[]{-6});
    rules[41] = new Rule(-20, new int[]{-20,21,-6});
    rules[42] = new Rule(-27, new int[]{-6});
    rules[43] = new Rule(-24, new int[]{-6});
    rules[44] = new Rule(-21, new int[]{-6});
    rules[45] = new Rule(-28, new int[]{-6});
    rules[46] = new Rule(-23, new int[]{-29});
    rules[47] = new Rule(-12, new int[]{-5,-22,-29});
    rules[48] = new Rule(-13, new int[]{4,-29});
    rules[49] = new Rule(-29, new int[]{37,-30,38});
    rules[50] = new Rule(-29, new int[]{37,38});
    rules[51] = new Rule(-30, new int[]{-31});
    rules[52] = new Rule(-30, new int[]{-30,-31});
    rules[53] = new Rule(-31, new int[]{-32});
    rules[54] = new Rule(-31, new int[]{-33});
    rules[55] = new Rule(-32, new int[]{-15,-34,29});
    rules[56] = new Rule(-32, new int[]{-14});
    rules[57] = new Rule(-34, new int[]{-28});
    rules[58] = new Rule(-34, new int[]{-34,23,-28});
    rules[59] = new Rule(-33, new int[]{-35});
    rules[60] = new Rule(-33, new int[]{-36,29});
    rules[61] = new Rule(-33, new int[]{-37});
    rules[62] = new Rule(-33, new int[]{-38});
    rules[63] = new Rule(-33, new int[]{-39});
    rules[64] = new Rule(-33, new int[]{-29});
    rules[65] = new Rule(-35, new int[]{29});
    rules[66] = new Rule(-36, new int[]{-40});
    rules[67] = new Rule(-37, new int[]{30,26,-40,27,-33,15,-33});
    rules[68] = new Rule(-38, new int[]{32,26,-40,27,-33});
    rules[69] = new Rule(-39, new int[]{46,-40,29});
    rules[70] = new Rule(-39, new int[]{46,29});
    rules[71] = new Rule(-41, new int[]{-40});
    rules[72] = new Rule(-41, new int[]{-41,23,-40});
    rules[73] = new Rule(-40, new int[]{-20,44,-40});
    rules[74] = new Rule(-40, new int[]{-40,14,-40});
    rules[75] = new Rule(-40, new int[]{-40,49,-40});
    rules[76] = new Rule(-40, new int[]{-40,19,-40});
    rules[77] = new Rule(-40, new int[]{-40,22,-40});
    rules[78] = new Rule(-40, new int[]{-40,36,-40});
    rules[79] = new Rule(-40, new int[]{-40,11,-40});
    rules[80] = new Rule(-40, new int[]{-40,48,-40});
    rules[81] = new Rule(-40, new int[]{-40,47,-40});
    rules[82] = new Rule(-40, new int[]{-40,12,-40});
    rules[83] = new Rule(-40, new int[]{-40,35,-40});
    rules[84] = new Rule(-40, new int[]{-40,28,-40});
    rules[85] = new Rule(-40, new int[]{-40,45,-40});
    rules[86] = new Rule(-40, new int[]{-40,8,-40});
    rules[87] = new Rule(-40, new int[]{-40,43,-40});
    rules[88] = new Rule(-40, new int[]{-40,7,-40});
    rules[89] = new Rule(-40, new int[]{-40,16,-40});
    rules[90] = new Rule(-40, new int[]{-42,-40});
    rules[91] = new Rule(-40, new int[]{-43});
    rules[92] = new Rule(-42, new int[]{45});
    rules[93] = new Rule(-42, new int[]{8});
    rules[94] = new Rule(-43, new int[]{-20});
    rules[95] = new Rule(-43, new int[]{-44});
    rules[96] = new Rule(-44, new int[]{-45});
    rules[97] = new Rule(-44, new int[]{-46});
    rules[98] = new Rule(-46, new int[]{26,-40,27});
    rules[99] = new Rule(-46, new int[]{-47});
    rules[100] = new Rule(-47, new int[]{52});
    rules[101] = new Rule(-47, new int[]{-48});
    rules[102] = new Rule(-47, new int[]{-49});
    rules[103] = new Rule(-47, new int[]{-50});
    rules[104] = new Rule(-49, new int[]{-44,21,-6});
    rules[105] = new Rule(-50, new int[]{-51,26,-41,27});
    rules[106] = new Rule(-50, new int[]{-51,26,27});
    rules[107] = new Rule(-51, new int[]{-47});
    rules[108] = new Rule(-51, new int[]{-20});
    rules[109] = new Rule(-51, new int[]{-45});
    rules[110] = new Rule(-45, new int[]{17});
    rules[111] = new Rule(-45, new int[]{9});
    rules[112] = new Rule(-6, new int[]{51});
    rules[113] = new Rule(-48, new int[]{50});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> ClassDeclaration
{ CurrentSemanticValue = new CompilationUnit(ValueStack[ValueStack.Depth-1]);  }
        break;
      case 3: // CompilationUnit -> MethodDeclarations
{ CurrentSemanticValue = new CompilationUnit(ValueStack[ValueStack.Depth-1]);  }
        break;
      case 4: // ClassDeclaration -> Modifiers, CLASS, Identifier, ClassBody
{ CurrentSemanticValue = MakeClassDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 5: // MethodDeclarations -> MethodDeclaration
{CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 6: // MethodDeclarations -> MethodDeclarations, MethodDeclaration
{ValueStack[ValueStack.Depth-2].makeSibling(ValueStack[ValueStack.Depth-1]); }
        break;
      case 7: // Modifiers -> PUBLIC
{ CurrentSemanticValue = MakeList((int)Token.PUBLIC); }
        break;
      case 8: // Modifiers -> PRIVATE
{ CurrentSemanticValue = MakeList((int)Token.PRIVATE); }
        break;
      case 9: // Modifiers -> STATIC
{ CurrentSemanticValue = MakeList((int)Token.STATIC); }
        break;
      case 10: // Modifiers -> Modifiers, PUBLIC
{ ((ModifierList)ValueStack[ValueStack.Depth-2]).Add((int)Token.PUBLIC); }
        break;
      case 11: // Modifiers -> Modifiers, PRIVATE
{ ((ModifierList)ValueStack[ValueStack.Depth-2]).Add((int)Token.PRIVATE); }
        break;
      case 12: // Modifiers -> Modifiers, STATIC
{ ((ModifierList)ValueStack[ValueStack.Depth-2]).Add((int)Token.STATIC); }
        break;
      case 13: // ClassBody -> LBRACE, FieldDeclarations, RBRACE
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 15: // FieldDeclarations -> FieldDeclaration
{ CurrentSemanticValue = MakeFieldDeclarations(ValueStack[ValueStack.Depth-1]); }
        break;
      case 16: // FieldDeclarations -> FieldDeclarations, FieldDeclaration
{ ValueStack[ValueStack.Depth-2].adoptChildren(ValueStack[ValueStack.Depth-1]); }
        break;
      case 17: // FieldDeclaration -> FieldVariableDeclaration, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 18: // FieldDeclaration -> MethodDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 19: // FieldDeclaration -> ConstructorDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 20: // FieldDeclaration -> StaticInitializer
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 21: // FieldDeclaration -> StructDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 22: // StructDeclaration -> Modifiers, STRUCT, Identifier, ClassBody
{ CurrentSemanticValue = MakeStructDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 23: // FieldVariableDeclaration -> Modifiers, TypeSpecifier, FieldVariableDeclarators
{ CurrentSemanticValue = MakeFieldVariableDeclaration(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]); }
        break;
      case 24: // TypeSpecifier -> TypeName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 26: // TypeName -> PrimitiveType
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 27: // TypeName -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 28: // ArraySpecifier -> TypeName, LBRACKET, RBRACKET
{  }
        break;
      case 29: // PrimitiveType -> BOOLEAN
{ CurrentSemanticValue = MakePrimitiveType((int)Token.BOOLEAN); }
        break;
      case 30: // PrimitiveType -> INT
{ CurrentSemanticValue = MakePrimitiveType((int)Token.INT); }
        break;
      case 31: // PrimitiveType -> VOID
{ CurrentSemanticValue = MakePrimitiveType((int)Token.VOID); }
        break;
      case 32: // FieldVariableDeclarators -> FieldVariableDeclaratorName
{ CurrentSemanticValue = MakeFieldVariableDeclarators(ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // FieldVariableDeclarators -> FieldVariableDeclarators, COMMA, 
               //                             FieldVariableDeclaratorName
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 34: // MethodDeclaration -> Modifiers, TypeSpecifier, MethodDeclarator, MethodBody
{ CurrentSemanticValue = MakeMethodDeclaration(ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]); }
        break;
      case 35: // MethodDeclarator -> MethodDeclaratorName, LPAREN, ParameterList, RPAREN
{ CurrentSemanticValue = MakeMethodDeclarator(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 36: // MethodDeclarator -> MethodDeclaratorName, LPAREN, RPAREN
{ CurrentSemanticValue = MakeMethodDeclarator(ValueStack[ValueStack.Depth-3]); }
        break;
      case 37: // ParameterList -> Parameter
{ CurrentSemanticValue = MakeParameterList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 38: // ParameterList -> ParameterList, COMMA, Parameter
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 39: // Parameter -> TypeSpecifier, DeclaratorName
{ CurrentSemanticValue = MakeParameter(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 40: // QualifiedName -> Identifier
{ CurrentSemanticValue = MakeQualifiedName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 41: // QualifiedName -> QualifiedName, PERIOD, Identifier
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 42: // DeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
        break;
      case 43: // MethodDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
        break;
      case 44: // FieldVariableDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
        break;
      case 45: // LocalVariableDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
        break;
      case 46: // MethodBody -> Block
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 47: // ConstructorDeclaration -> Modifiers, MethodDeclarator, Block
{  }
        break;
      case 48: // StaticInitializer -> STATIC, Block
{  }
        break;
      case 49: // Block -> LBRACE, LocalVariableDeclarationsAndStatements, RBRACE
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 50: // Block -> LBRACE, RBRACE
{  }
        break;
      case 51: // LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
{ CurrentSemanticValue = MakeLocalVariableDeclarationAndStatement(ValueStack[ValueStack.Depth-1]); }
        break;
      case 52: // LocalVariableDeclarationsAndStatements -> 
               //                                           LocalVariableDeclarationsAndStatements, 
               //                                           LocalVariableDeclarationOrStatement
{ ValueStack[ValueStack.Depth-2].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 53: // LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 54: // LocalVariableDeclarationOrStatement -> Statement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 55: // LocalVariableDeclarationStatement -> TypeSpecifier, LocalVariableDeclarators, 
               //                                      SEMICOLON
{ CurrentSemanticValue = MakeLocalVariableDeclarationStatement(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2]); }
        break;
      case 56: // LocalVariableDeclarationStatement -> StructDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 57: // LocalVariableDeclarators -> LocalVariableDeclaratorName
{ CurrentSemanticValue = MakeLocalVariableDeclarators(ValueStack[ValueStack.Depth-1]); }
        break;
      case 58: // LocalVariableDeclarators -> LocalVariableDeclarators, COMMA, 
               //                             LocalVariableDeclaratorName
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 59: // Statement -> EmptyStatement
{  }
        break;
      case 60: // Statement -> ExpressionStatement, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 61: // Statement -> SelectionStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 62: // Statement -> IterationStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 63: // Statement -> ReturnStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 64: // Statement -> Block
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 65: // EmptyStatement -> SEMICOLON
{  }
        break;
      case 66: // ExpressionStatement -> Expression
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 67: // SelectionStatement -> IF, LPAREN, Expression, RPAREN, Statement, ELSE, 
               //                       Statement
{ CurrentSemanticValue = MakeSelectionStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // IterationStatement -> WHILE, LPAREN, Expression, RPAREN, Statement
{ CurrentSemanticValue = MakeIterationStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // ReturnStatement -> RETURN, Expression, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 70: // ReturnStatement -> RETURN, SEMICOLON
{  }
        break;
      case 71: // ArgumentList -> Expression
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 72: // ArgumentList -> ArgumentList, COMMA, Expression
{ ValueStack[ValueStack.Depth-3].makeSibling(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 73: // Expression -> QualifiedName, EQUALS, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.EQUALS); }
        break;
      case 74: // Expression -> Expression, OP_LOR, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_LOR);  }
        break;
      case 75: // Expression -> Expression, OP_LAND, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_LAND);  }
        break;
      case 76: // Expression -> Expression, PIPE, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.PIPE);  }
        break;
      case 77: // Expression -> Expression, HAT, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.HAT);  }
        break;
      case 78: // Expression -> Expression, AND, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.AND);  }
        break;
      case 79: // Expression -> Expression, OP_EQ, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_EQ);  }
        break;
      case 80: // Expression -> Expression, OP_NE, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_NE);  }
        break;
      case 81: // Expression -> Expression, OP_GT, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_GT);  }
        break;
      case 82: // Expression -> Expression, OP_LT, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_LT);  }
        break;
      case 83: // Expression -> Expression, OP_LE, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_LE);  }
        break;
      case 84: // Expression -> Expression, OP_GE, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.OP_GE);  }
        break;
      case 85: // Expression -> Expression, PLUSOP, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.PLUSOP);  }
        break;
      case 86: // Expression -> Expression, MINUSOP, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.MINUSOP);  }
        break;
      case 87: // Expression -> Expression, ASTERISK, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.ASTERISK);  }
        break;
      case 88: // Expression -> Expression, RSLASH, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.RSLASH);  }
        break;
      case 89: // Expression -> Expression, PERCENT, Expression
{ CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1], (int)Token.PERCENT);  }
        break;
      case 90: // Expression -> ArithmeticUnaryOperator, Expression
{   }
        break;
      case 91: // Expression -> PrimaryExpression
{ CurrentSemanticValue =ValueStack[ValueStack.Depth-1];  }
        break;
      case 92: // ArithmeticUnaryOperator -> PLUSOP
{  }
        break;
      case 93: // ArithmeticUnaryOperator -> MINUSOP
{  }
        break;
      case 94: // PrimaryExpression -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 95: // PrimaryExpression -> NotJustName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 96: // NotJustName -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 97: // NotJustName -> ComplexPrimary
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 98: // ComplexPrimary -> LPAREN, Expression, RPAREN
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 99: // ComplexPrimary -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 100: // ComplexPrimaryNoParenthesis -> LITERAL
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 101: // ComplexPrimaryNoParenthesis -> Number
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 102: // ComplexPrimaryNoParenthesis -> FieldAccess
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 103: // ComplexPrimaryNoParenthesis -> MethodCall
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 104: // FieldAccess -> NotJustName, PERIOD, Identifier
{ CurrentSemanticValue = MakeBinary(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 105: // MethodCall -> MethodReference, LPAREN, ArgumentList, RPAREN
{ CurrentSemanticValue = MakeMethodCall(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]);  }
        break;
      case 106: // MethodCall -> MethodReference, LPAREN, RPAREN
{ CurrentSemanticValue = MakeMethodCall(ValueStack[ValueStack.Depth-3]);  }
        break;
      case 107: // MethodReference -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 108: // MethodReference -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 109: // MethodReference -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 110: // SpecialName -> THIS
{ CurrentSemanticValue = MakeSpecialName((int)Token.THIS); }
        break;
      case 111: // SpecialName -> NULL
{ CurrentSemanticValue = MakeSpecialName((int)Token.NULL); }
        break;
      case 112: // Identifier -> IDENTIFIER
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 113: // Number -> INT_NUMBER
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
